package serv

import (
	"bytes"

	"strings"
	"time"

	"google.golang.org/protobuf/proto"

	"github.com/chang144/gotalk/internal/him"
	"github.com/chang144/gotalk/internal/him/container"
	"github.com/chang144/gotalk/internal/him/wire"
	"github.com/chang144/gotalk/internal/him/wire/pkt"
	"github.com/klintcheng/kim/logger"
)

var log = logger.WithFields(logger.Fields{
	"service": wire.SNChat,
	"pkg":     "serv",
})

// LogicHandler Chat Service Handler
type LogicHandler struct {
	r          *him.Router
	cache      him.SessionStorage
	dispatcher *ChatServerDispatcher
}

// NewLogicHandler creates a new LogicHandler
func NewLogicHandler(r *him.Router, cache him.SessionStorage) *LogicHandler {
	return &LogicHandler{
		r:          r,
		cache:      cache,
		dispatcher: &ChatServerDispatcher{},
	}
}

// Receive 回调到业务层
func (h *LogicHandler) Receive(agent him.Agent, payload []byte) {
	buf := bytes.NewBuffer(payload)
	logicPkt, err := pkt.MustReadLogicPkt(buf)
	if err != nil {
		return
	}
	var session *pkt.Session
	if logicPkt.Command == wire.CommandLoginSignIn {
		server, _ := logicPkt.GetMeta(wire.MetaDestServer)
		session = &pkt.Session{
			ChannelId: logicPkt.ChannelId,
			GateId:    server.(string),
			Tags:      []string{"AutoGenerated"},
		}
	} else {
		_, err := h.cache.Get(logicPkt.ChannelId)
		if err == him.ErrSessionNil {
			_ = RespErr(agent, logicPkt, pkt.Status_SessionNotFound)
			return
		} else if err != nil {
			_ = RespErr(agent, logicPkt, pkt.Status_SystemException)
			return
		}
	}
	err = h.r.Serve(logicPkt, h.dispatcher, h.cache, session)
	if err != nil {
		log.Warn(err)
	}

}

// Accept  系统内部握手请求
func (h *LogicHandler) Accept(conn him.Conn, timeout time.Duration) (string, error) {
	log.Infoln("try enter chat handler")

	_ = conn.SetReadDeadline(time.Now().Add(timeout))
	frame, err := conn.ReadFrame()
	if err != nil {
		return "", err
	}

	var req pkt.InnerHandshakeRequest
	err = proto.Unmarshal(frame.GetPayload(), &req)
	if err != nil {
		return "", err
	}
	log.Info("Accept -- chat handler", req.ServiceId)

	return req.ServiceId, nil
}

func (h *LogicHandler) Disconnect(id string) error {
	return nil
}

var _ him.Handler = (*LogicHandler)(nil)

func RespErr(ag him.Agent, p *pkt.LogicPkt, status pkt.Status) error {
	packet := pkt.NewLogicPkt(&p.Header)
	packet.Status = status
	packet.Flag = pkt.Flag_Response

	return ag.Push(pkt.Marshal(packet))
}

type ChatServerDispatcher struct {
}

func (c *ChatServerDispatcher) Push(gateway string, channels []string, p *pkt.LogicPkt) error {
	p.AddStringMeta(wire.MetaDestChannels, strings.Join(channels, ","))
	return container.Push(gateway, p)
}

var _ him.Dispatcher = (*ChatServerDispatcher)(nil)
